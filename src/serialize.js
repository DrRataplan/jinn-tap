/**
 * Serializes the editor's content to TEI XML format
 * @param {Editor} editor - The Tiptap editor instance
 * @returns {string} The complete TEI XML document
 */
export function serializeToTEI(editor) {
  const json = editor.getJSON();
  let teiContent = '';

  /**
   * Recursively serializes a node and its children to TEI XML
   * @param {Object} node - The node to serialize
   * @returns {string} The serialized TEI XML for this node
   */
  function serializeNode(node) {
    if (node.type === 'text') {
      let text = node.text;
      // Handle marks on text nodes
      if (node.marks) {
        node.marks.forEach(mark => {
          if (mark.type === 'teiHi') {
            const rend = mark.attrs.rend;
            text = `<hi rend="${rend}">${text}</hi>`;
          }
        });
      }
      return text;
    }

    let content = '';
    if (node.content) {
      content = node.content.map(serializeNode).join('');
    }

    switch (node.type) {
      case 'doc':
        return content;
      case 'teiP':
        return `<p>${content}</p>`;
      case 'teiPb':
        const n = node.attrs.n ? ` n="${node.attrs.n}"` : '';
        return `<pb${n}/>`;
      case 'teiDiv':
        return `<div>${content}</div>`;
      case 'teiHead':
        return `<head>${content}</head>`;
      default:
        return content;
    }
  }

  teiContent = serializeNode(json);

  return `<?xml version="1.0" encoding="UTF-8"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>TEI Document</title>
      </titleStmt>
      <publicationStmt>
        <p>Generated by TEI Editor</p>
      </publicationStmt>
    </fileDesc>
  </teiHeader>
  <text>
    <body>
      ${teiContent}
    </body>
  </text>
</TEI>`;
} 